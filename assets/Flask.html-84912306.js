import{_ as i,r as l,o as c,c as p,a as n,b as s,d as a,w as r,e as t}from"./app-9e62998e.js";const d={},u=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),s(" 介绍")],-1),k=n("p",null,"Flask 诞生于2010年，是Armin ronacher（阿明·罗纳彻）用 Python 语言基于 Werkzeug 工具箱编写的轻量级 Web 开发框架。",-1),m=n("p",null,"Flask 本身相当于一个内核，其他几乎所有的功能都要用到扩展（邮件扩展Flask-Mail，用户认证Flask-Login，数据库Flask-SQLAlchemy），都需要用第三方的扩展来实现。比如可以用 Flask 扩展加入ORM、窗体验证工具，文件上传、身份验证等。",-1),h=n("p",null,[n("strong",null,"官方文档：")],-1),_={href:"https://flask.palletsprojects.com/en/3.0.x/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://dormousehole.readthedocs.io/en/latest/index.html",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"准备阶段",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#准备阶段","aria-hidden":"true"},"#"),s(" 准备阶段")],-1),f=t(`<li><p>安装 Flask</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> flask
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,1),g=t(`<h2 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h2><ul><li>static：静态文件（js、css、图片等等）</li><li>templates：模板文件（主要是 HTML 文件）</li><li>app.py：项目从这个文件运行，是核心文件。</li></ul><p><strong>Flask文件结构默认为上面这样，是可以通过配置改变的（如果不修改的话就一定要按照上面目录来，否则会报错）。</strong></p><h2 id="第一个falsk程序" tabindex="-1"><a class="header-anchor" href="#第一个falsk程序" aria-hidden="true">#</a> 第一个Falsk程序</h2><p>配置好了环境，了解了项目结构后就可以开始我们的第一个 Flask 程序了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask  <span class="token comment"># 导 Flask 类，这个类是项目的核心。</span>
 
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token comment"># 初始化 Flask 应用程序的实例对象</span>
 
 
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>  
<span class="token comment"># 装饰器 作用是将url中的 / 映射到 hello_world 这个视图函数上面</span>
<span class="token comment"># 访问我这个网站的 / 目录的时候，会执行hello_world这个函数，然后将这个函数的返回值返回给浏览器。</span>
<span class="token comment"># 如当你访问网址 http://127.0.0.1:8888/ -&gt; 跳转去访问 hello_world 函数</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 视图的函数名不能重复，否则报错</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Hello World!&#39;</span>  <span class="token comment"># 这里可以返回很多东西: 字符串、数字、静态文件、html、json 数据等等</span>
 
 
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token comment"># 启动服务</span>
<span class="token comment"># host:	ip，如果希望外网也能访问要设置为 0.0.0.0</span>
<span class="token comment"># port：端口默认为 5000</span>
<span class="token comment"># debug：debug 模式下修改代码会重新运行网站，不开启的话修改代码以后需要自己重新运行代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Flask( )的部分参数讲解：</strong></p><ul><li><code>import_name</code>：Flask程序所在的包(模块)，传 __name__ 就可以。其可以决定 Flask 在访问静态文件时查找的路径</li><li><code>static_path</code>：静态文件存储访问路径(不推荐使用，使用 <code>static_url_path </code>代替)</li><li><code>static_url_path</code>：静态文件的 url 访问路径，可以不传，默认为：<code>/ + static_folder</code></li><li><code>static_folder</code>：静态文件存储的文件夹，可以不传，默认为 static</li><li><code>template_folder</code>：模板（HTML）文件存储的文件夹，可以不传，默认为 templates</li></ul>`,8);function F(x,y){const e=l("ExternalLinkIcon"),o=l("RouterLink");return c(),p("div",null,[u,k,m,h,n("ul",null,[n("li",null,[n("a",_,[s("最新版本(3.x)官网"),a(e)])]),n("li",null,[n("a",v,[s("中文文档(2.x 版本)"),a(e)])])]),b,n("ol",null,[n("li",null,[n("p",null,[s("使用本地环境或者创建虚拟环境（建议创建虚拟环境）。具体怎么创建可以看 "),a(o,{to:"/blogs/other/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.html"},{default:r(()=>[s("这篇文章")]),_:1})])]),f]),g])}const E=i(d,[["render",F],["__file","Flask.html.vue"]]);export{E as default};
