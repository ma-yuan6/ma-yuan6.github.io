import{_ as o,r as t,o as r,c,a as n,b as s,d as a,w as p,e as i}from"./app-d188f79b.js";const d={},u=i('<h2 id="git-是什么" tabindex="-1"><a class="header-anchor" href="#git-是什么" aria-hidden="true">#</a> Git 是什么</h2><p>Git 是一个分布式版本控制软件，主要用来做代码管理。这样说你肯定蒙，要想明白 <em><strong>Git</strong></em> 是什么我们只需要理解<code>软件</code> <code>版本控制</code> <code>分布式</code>分别是什么？</p><ul><li>软件 -&gt; 类似于 QQ、offic、网易云等安装到电脑上使用的工具。</li><li>版本控制 -&gt; 论文、代码、海报设计等，不停的更新迭代形成不同的版本。</li><li>分布式 -&gt; 简单来说就是多台电脑同时工作，互相不干扰。</li></ul><h3 id="集中式与分布式" tabindex="-1"><a class="header-anchor" href="#集中式与分布式" aria-hidden="true">#</a> 集中式与分布式</h3><p><img src="https://s2.loli.net/2024/03/16/bXYdUrJRSt6ieDs.png" alt="分布式与集中式"></p><blockquote><ol><li>集中式版本控制只有中心服务器拥有一份代码，而分布式版本控制每个人的电脑上就有一份完整的代码。</li><li>集中式版本控制有安全性问题，因为只有中心服务器拥有一份代码，所以当中心服务器挂了所有人都没办法工作。</li><li>集中式版本控制需要连网才能工作，因为代码存在服务器上，而分布式版本控制不需要连网就能工作，代码存储在每个人的电脑中。</li></ol></blockquote><h3 id="中心服务器" tabindex="-1"><a class="header-anchor" href="#中心服务器" aria-hidden="true">#</a> 中心服务器</h3>',7),g={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"为什么要做版本控制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#为什么要做版本控制","aria-hidden":"true"},"#"),s(" 为什么要做版本控制")],-1),m=n("p",null,"​ 这样可以保留之前的版本，如果有需要可以回滚和修改。如：写着写着发现还是之前之前的方案好；或是写着写着发现写不下去了，想要回退到之前可以使用的版本。",-1),v=n("h2",{id:"怎么安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#怎么安装","aria-hidden":"true"},"#"),s(" 怎么安装")],-1),b={href:"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),f=n("strong",null,"命令参考：",-1),_={href:"https://git-scm.com/docs",target:"_blank",rel:"noopener noreferrer"},x=n("strong",null,"Git学习：",-1),E={href:"https://www.runoob.com/git/git-tutorial.html",target:"_blank",rel:"noopener noreferrer"},G=n("strong",null,"可视化练习Git：",-1),w={href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},A=i(`<h2 id="怎么使用" tabindex="-1"><a class="header-anchor" href="#怎么使用" aria-hidden="true">#</a> 怎么使用</h2><p>要想让git对一个项目进行版本控制需要以下步骤：</p><ol><li><p>进入要管理的项目文件夹</p><p>假设我要管理根文件夹下 <code>project</code> 的项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>执行初始化命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这会在该文件夹下生成 <code>.git</code> 文件，这个文件主要用来存储版本信息，是 Git 工作的核心。</p><p><strong>目录介绍：</strong></p><ul><li><strong>branches</strong> ：分支管理目录</li><li><strong>config</strong> ：当前项目仓库的配置信息</li><li><strong>description</strong> ：当前项目的描述</li><li><strong>HEAD</strong> ：当前项目仓库的当前版本信息</li><li><strong>hooks</strong> ：当前项目仓库的钩子目录</li><li><strong>info</strong> ：仓库相关信息</li><li><strong>objects</strong> ：仓库版本信息</li><li><strong>refs</strong> ：引用信息</li></ul></div></li><li><p>查看目录下的文件状态</p><p>可以使用 <code>-s</code> 参数来获得简短的输出结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status

<span class="token comment"># 注: 新增文件和修改过的文件都红色的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将文件添加入暂存区</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> 文件名
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>

<span class="token comment"># 注: git add . 表示将所有文件添加入暂存区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置个人信息：用户名、邮箱【一次即可】</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;you@example.com&quot;</span>
 <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;Your Name&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置相关操作：</strong></p><ul><li><p>查看所有配置项：<code>git config --list</code></p></li><li><p>查看仓库级的config：<code>git config --local -l</code></p></li><li><p>查看全局级的config：<code>git config --global -l</code></p></li><li><p>查看系统级的config：<code>git config --system -l</code></p></li></ul></li><li><p>生成版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;描述信息&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>回滚版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset

<span class="token comment"># 注: 版本号使 git log 和 git reflog 命令查看</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>谨慎使用 <code>–-hard</code> 参数，它会删除回退点之前的所有信息。</p></div></li></ol><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><ol><li><p>添加远程仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> <span class="token operator">&lt;</span>shortname<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>
<span class="token function">git</span> remote  <span class="token comment"># 查看当前有哪些远程仓库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>shortname：给远程仓库取个名</li><li>url：远程仓库地址</li></ul></li><li><p>克隆远程仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token operator">&lt;</span>repo<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>repo：远程仓库地址</li></ul></li><li><p>推送代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token operator">&lt;</span>远程仓库名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span>

<span class="token comment"># 如果本地分支名与远程分支名相同，则可以省略冒号</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>这里的 <strong>远程仓库名</strong> 就是上面添加远程库取的远程仓库名。</p></div></li><li><p>获取代码</p><p><strong>git pull</strong> 其实就是 <strong>git fetch</strong> 加上 <strong>git merge FETCH_HEAD</strong> 。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="其他操作" tabindex="-1"><a class="header-anchor" href="#其他操作" aria-hidden="true">#</a> 其他操作</h2><ol><li><p>查看版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log  <span class="token comment"># 或者</span>
<span class="token function">git</span> reflog

<span class="token function">git</span> log –p  <span class="token comment"># 过滤查看日志：</span>
  	<span class="token comment"># 退出按【q】键</span>
  	<span class="token comment"># ctrl+f向下分页</span>
  	<span class="token comment"># ctrl+b 向上分页</span>

<span class="token function">git</span> log <span class="token parameter variable">--after</span>  <span class="token string">&#39;2018-11-6&#39;</span>  <span class="token comment"># 显示指定日期之后的日志   </span>
<span class="token function">git</span> log <span class="token parameter variable">--before</span> <span class="token string">&#39;2018-11-6&#39;</span>  <span class="token comment"># 显示指定日期之前的日志</span>
<span class="token function">git</span> log <span class="token parameter variable">--author</span> <span class="token string">&#39;lisi&#39;</span>       <span class="token comment"># 指定显示指定开发者的日志 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>分支操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch                 <span class="token comment"># 查看有哪些分支</span>
<span class="token function">git</span> branch <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span>         <span class="token comment"># 创建分支</span>
<span class="token function">git</span> checkout <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span>       <span class="token comment"># 切换分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-D</span> <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span>  <span class="token comment"># 删除分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,7);function q(N,B){const e=t("ExternalLinkIcon"),l=t("RouterLink");return r(),c("div",null,[u,n("p",null,[s("中心服务器用来交换每个用户的修改，没有中心服务器也能工作，但是中心服务器能够 24 小时保持开机状态，这样就能更方便的交换修改。"),n("a",g,[s("Github"),a(e)]),s(" 就是一个中心服务器。")]),h,m,v,n("p",null,[s("网上教程一堆，这里就步详细介绍了。可以参考 "),n("a",b,[s("官网"),a(e)]),s("。")]),k,n("p",null,[f,n("a",_,[s("https://git-scm.com/docs"),a(e)])]),n("p",null,[x,n("a",E,[s("https://www.runoob.com/git/git-tutorial.html"),a(e)])]),n("p",null,[G,n("a",w,[s("https://learngitbranching.js.org/?locale=zh_CN"),a(e)])]),A,n("p",null,[s("网上学习资源很多。其余知识在上面"),a(l,{to:"/blogs/other/Git.html#%E6%80%8E%E4%B9%88%E5%AE%89%E8%A3%85"},{default:p(()=>[s("推荐的网站")]),_:1}),s("上均有。")])])}const C=o(d,[["render",q],["__file","Git.html.vue"]]);export{C as default};
