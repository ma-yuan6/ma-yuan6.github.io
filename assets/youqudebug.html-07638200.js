import{_ as e,r as p,o as t,c as o,a as s,b as n,d as c,e as l}from"./app-d188f79b.js";const i={},r={href:"https://leetcode.cn/problems/longest-well-performing-interval/description/",target:"_blank",rel:"noopener noreferrer"},u=l(`<p>题目如下：</p><p>给你一份工作时间表 <code>hours</code>，上面记录着某一位员工每天的工作小时数。</p><p>我们认为当员工一天中的工作小时数大于 <code>8</code> 小时的时候，那么这一天就是「<strong>劳累的一天</strong>」。</p><p>所谓「表现良好的时间段」，意味在这段时间内，「劳累的天数」是严格 <strong>大于</strong>「不劳累的天数」。</p><p>请你返回「表现良好时间段」的最大长度。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：hours = [9,9,6,0,6,6,9]
输出：3
解释：最长的表现良好时间段是 [9,9,6]。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：hours = [6,6,6]
输出：0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我的解法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">longestWPI</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> hours<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        maxinterval <span class="token operator">=</span> <span class="token number">0</span>
        presum <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token builtin">map</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            presum <span class="token operator">+=</span> <span class="token number">1</span> <span class="token keyword">if</span> hours<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">8</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>
            <span class="token keyword">if</span> presum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                maxinterval <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token builtin">map</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>presum<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    <span class="token builtin">map</span><span class="token punctuation">[</span>presum<span class="token punctuation">]</span> <span class="token operator">=</span> i
                
                <span class="token keyword">if</span> <span class="token builtin">map</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>presum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    j <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">[</span>presum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
                    interval <span class="token operator">=</span> i <span class="token operator">-</span> j
                    maxinterval <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>maxinterval<span class="token punctuation">,</span> interval<span class="token punctuation">)</span>
        <span class="token keyword">return</span> maxinterval
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刚开始时我的两个判断是 <code>if map.get(presum) </code> 和 <code>if not map.get(presum - 1)</code>，这样会产生什么问题呢？</p><p><code>if map.get(presum)</code> 的原意是看存不存在 <code>presum</code> 这个键，但是当键对应的数为 <strong>0</strong> 时，按照我们的意思应该返回 <code>True</code>的，因为可以取到数嘛。但是因为取到 的是 <strong>0</strong> ，那么就变成了判断 <code>if 0</code> 就会返回 <code>False</code>。</p>`,13);function d(k,m){const a=p("ExternalLinkIcon");return t(),o("div",null,[s("p",null,[n("因为有实习的打算，最近一直在练习算法。在遇到"),s("a",r,[n("下面这道题"),c(a)]),n("的时候遇到了一个哭笑不得的 BUG 🤣。")]),u])}const b=e(i,[["render",d],["__file","youqudebug.html.vue"]]);export{b as default};
