import{_ as t,o as e,c as i,e as r}from"./app-d188f79b.js";const a={},l=r('<h2 id="什么是设计模式" tabindex="-1"><a class="header-anchor" href="#什么是设计模式" aria-hidden="true">#</a> 什么是设计模式</h2><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。（用大白话来说就是前辈总结出来的编程模板）</p><p>使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案。</p><h2 id="设计模式的类型" tabindex="-1"><a class="header-anchor" href="#设计模式的类型" aria-hidden="true">#</a> 设计模式的类型</h2><p>设计模式总共有 23 种。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p><h3 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式" aria-hidden="true">#</a> <strong>创建型模式</strong></h3><p>这些设计模式提供了一种在 <strong>创建对象的同时隐藏创建逻辑</strong> 的方式，而不是显示的直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。主要以下几种：</p><ul><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul><h3 id="结构型模式" tabindex="-1"><a class="header-anchor" href="#结构型模式" aria-hidden="true">#</a> 结构型模式</h3><p>这些模式关注 <strong>对象之间的组合和关系</strong> ，旨在解决如何构建灵活且可复用的类和对象结构。</p><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul><p><strong>行为型模式</strong> 这些模式关注 <strong>对象之间的通信和交互</strong>，旨在解决对象之间的责任分配和算法的封装。</p><ul><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul><h2 id="设计模式的优点" tabindex="-1"><a class="header-anchor" href="#设计模式的优点" aria-hidden="true">#</a> 设计模式的优点</h2><ul><li>提供了一种共享的设计词汇和概念，使开发人员能够更好地沟通和理解彼此的设计意图。</li><li>提供了经过验证的解决方案，可以提高软件的可维护性、可复用性和灵活性。</li><li>促进了代码的重用，避免了重复的设计和实现。</li><li>通过遵循设计模式，可以减少系统中的错误和问题，提高代码质量。</li></ul>',15),n=[l];function o(s,h){return e(),i("div",null,n)}const c=t(a,[["render",o],["__file","shejimoshijianjie.html.vue"]]);export{c as default};
