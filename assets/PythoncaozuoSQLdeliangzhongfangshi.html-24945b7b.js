import{_ as p,r as o,o as c,c as l,a as n,b as e,d as t,e as s}from"./app-9e62998e.js";const i={},u=s(`<h2 id="pymyql" tabindex="-1"><a class="header-anchor" href="#pymyql" aria-hidden="true">#</a> pymyql</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，废话不多说，直接开始。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install pymysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据库连接" tabindex="-1"><a class="header-anchor" href="#数据库连接" aria-hidden="true">#</a> 数据库连接</h3><p>pymysql 提供 connect() 用于数据库连接。我们需要指定以常用参数，方便确定数据库的位置以及编码方式：</p><ul><li>host： Mysql 地址，远程数据库的话用 IP地址</li><li>user：Mysql 用户名</li><li>password：密码</li><li>database：数据库库名</li><li>port ：Mysql 端口，如果有手动更改过的话， 一般默认是 3306</li><li>charset：编码方式</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># coding: utf-8</span>

<span class="token keyword">import</span> pymysql

host <span class="token operator">=</span> <span class="token string">&#39;localhost&#39;</span>  <span class="token comment"># 地址远程的话用 IP</span>
user <span class="token operator">=</span> <span class="token string">&#39;root&#39;</span>  <span class="token comment"># Mysql 用户名</span>
password <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>  <span class="token comment"># 密码</span>
database <span class="token operator">=</span> <span class="token string">&#39;Database&#39;</span>  <span class="token comment"># 库名</span>
dbconnect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span>host<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">,</span> database<span class="token operator">=</span>database<span class="token punctuation">,</span>
                            charset<span class="token operator">=</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="建库建表" tabindex="-1"><a class="header-anchor" href="#建库建表" aria-hidden="true">#</a> 建库建表</h3><p>pymsql 操作数据库一般有以下三个步骤：</p><ol><li>连接数据库</li><li>创建游标对象</li><li>执行 SQL 语句</li><li>插入、更新、删除操作需要提交</li><li>关闭连接</li></ol><p>我们可以使用 cursor() 创建游标对象，execute() 执行 SQL 语句。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pymysql

dbconnect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">&#39;studet&#39;</span><span class="token punctuation">)</span>
dbcursor <span class="token operator">=</span> dbconnect<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建游标</span>

<span class="token comment"># 使用预处理语句创建表</span>
sql <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;CREATE TABLE student (
         NAME  CHAR(20) NOT NULL,
         AGE INT,  
         SEX CHAR(1)&quot;&quot;&quot;</span>
dbcursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>   <span class="token comment"># 执行 sql 语句</span>
dbconnect<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭数据库连接</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入数据" tabindex="-1"><a class="header-anchor" href="#插入数据" aria-hidden="true">#</a> 插入数据</h3><p>和上面一样，先创建游标对象，再执行 SQL 语句，不过 <strong>需要加上 commit</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pymysql

dbconnect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">&#39;studet&#39;</span><span class="token punctuation">)</span>
dbcursor <span class="token operator">=</span> dbconnect<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建游标</span>

<span class="token comment"># SQL 插入语句</span>
sql <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;INSERT INTO student (NAME, AGE, SEX)
         VALUES (&#39;Ma&#39;, 20, &#39;M&#39;)&quot;&quot;&quot;</span>

cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>  <span class="token comment"># 执行sql语句</span>
db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 提交到数据库执行</span>
db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭数据库连接</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新与删除" tabindex="-1"><a class="header-anchor" href="#更新与删除" aria-hidden="true">#</a> 更新与删除</h3><p><strong>所有操作和上面都一样的，只需要修改 SQL。千万不要忘记 commit 操作就行，否则 SQL 语句不会生效。</strong></p><h3 id="回滚" tabindex="-1"><a class="header-anchor" href="#回滚" aria-hidden="true">#</a> 回滚</h3><p>对于支持事务的数据库， 在 Python 数据库编程中，<strong>当游标建立之时，就自动开始了一个隐形的数据库事务</strong>。commit() 方法提交游标的所有更新操作，rollback() 方法回滚 <strong>当前游标</strong> 的所有操作。每一个方法都开启一个新的事务。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pymysql
 
<span class="token comment"># 打开数据库连接</span>
db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
                     user<span class="token operator">=</span><span class="token string">&#39;testuser&#39;</span><span class="token punctuation">,</span>	
                     password<span class="token operator">=</span><span class="token string">&#39;test123&#39;</span><span class="token punctuation">,</span>
                     database<span class="token operator">=</span><span class="token string">&#39;TESTDB&#39;</span><span class="token punctuation">)</span>
 
<span class="token comment"># 使用cursor()方法获取操作游标 </span>
cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
 
<span class="token comment"># SQL 删除语句</span>
sql <span class="token operator">=</span> <span class="token string">&quot;DELETE FROM EMPLOYEE WHERE AGE &gt; %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
   <span class="token comment"># 执行SQL语句</span>
   cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>
   <span class="token comment"># 提交修改</span>
   db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
   <span class="token comment"># 发生错误时回滚</span>
   db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>不难看看出使用这种方式操作数据库，其实很简单。因为操作数据的重点还是写 SQL 语句。只需要使用函数来执行 SQL 而已。这种方式唯一的难点就是怎么通过参数拼接 SQL 。</p><p><strong>但是这种方式如果不对输入进行限制会有比较严重的 SQL注入 风险。</strong></p><h2 id="sql-alchemy" tabindex="-1"><a class="header-anchor" href="#sql-alchemy" aria-hidden="true">#</a> SQL Alchemy</h2><p>SQLAlchemy 是一个Python语言编写的高性能的关系型数据库ORM框架，它提供了高层的 ORM 和底层的原生数据库的操作。</p><h3 id="orm" tabindex="-1"><a class="header-anchor" href="#orm" aria-hidden="true">#</a> ORM</h3><p><strong>ORM</strong> 全拼<code>Object-Relation Mapping</code>，中文意为 <strong>对象-关系映射</strong>。主要实现模型对象到关系数据库数据的映射。</p><p>ORM提供了一种面向对象操作数据库的方式给开发者。不需要编写原生SQL语句也能操作数据库，实现了业务代码与底层数据的解耦。</p><p>优点：</p><ul><li>只需要面向对象编程, 不需要面向数据库编写 SQL。 <ul><li>对数据库的操作都转化成对类/对象的属性和方法的操作。</li><li>不用编写各种数据库的<code>原生sql语句</code>，也可以编写原生SQL语句。</li></ul></li><li>实现了数据模型代码与数据库数据的解耦, 屏蔽了不同数据库操作上的差异。 <ul><li>不再需要关注当前项目使用的是哪种数据库。</li><li>通过简单的配置就可以轻松更换数据库，而不需要修改业务代码.</li></ul></li></ul><p>缺点：</p><ul><li>相比较直接使用SQL语句操作数据库,ORM需要把操作转换成SQL语句，所以有性能损失.</li><li>根据对象的操作转换成SQL语句,根据查询的结果转化成模型实例对象, 在映射过程中有性能损失.</li><li>不同的ORM提供的操作不一样，增加了学习成本</li></ul><h3 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1" aria-hidden="true">#</a> 安装</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install SQLAlchemy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据库连接-1" tabindex="-1"><a class="header-anchor" href="#数据库连接-1" aria-hidden="true">#</a> 数据库连接</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine  <span class="token comment"># 数据库引擎</span>

engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">&#39;mysql+pymysql://root:123@localhost:3306/todo?charset=utf8mb4&#39;</span><span class="token punctuation">,</span>
                       echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> pool_recycle<span class="token operator">=</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>部分参数及解释：</strong></p><ul><li>echo：默认为 FALSE，如果为真，将输出转化后的 SQL 语句。</li><li>encoding：编码，默认为 <code>utf-8</code>。</li><li>pool_size：连接池大小，默认为5，设置为0时表示无限制。</li><li>pool_recycle：设置时间以限制数据库多久没连接自动断开。</li></ul><h3 id="使用sql语句操作" tabindex="-1"><a class="header-anchor" href="#使用sql语句操作" aria-hidden="true">#</a> 使用SQL语句操作</h3><p>sqlalchemy 除了使用面向对象的方式，其实也提供的原生 SQL 操作数据库的方法。</p>`,41),r={href:"https://docs.sqlalchemy.org/en/20/tutorial/dbapi_transactions.html",target:"_blank",rel:"noopener noreferrer"},d=s(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 方式一、直接使用核心</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine  <span class="token comment"># 数据库引擎</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> text  <span class="token comment"># text 函数用于创建一个 SQL 表达式对象</span>

engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">&#39;mysql+pymysql://root:123@localhost:3306/todo?charset=utf8mb4&#39;</span><span class="token punctuation">,</span>
                       echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> pool_recycle<span class="token operator">=</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> engine<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> con<span class="token punctuation">:</span>
    ans <span class="token operator">=</span> con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>text<span class="token punctuation">(</span><span class="token string">&#39;SELECT id, title FROM topic&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    可以在后面参数中,添加SQL的参数如：
        conn.execute(
        	text(&quot;INSERT INTO some_table (x, y) VALUES (:x, :y)&quot;),
            [{&quot;x&quot;: 11, &quot;y&quot;: 12}, {&quot;x&quot;: 13, &quot;y&quot;: 14}],
        )
    具体看官方参考（上面链接）
    &quot;&quot;&quot;</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 同样如果是更新删除操作需要提交 conn.commit()</span>

<span class="token comment"># 方式二、使用会话</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine  <span class="token comment"># 数据库引擎</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> text
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> Session  <span class="token comment"># Session 有多种不同的创建模式</span>

engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">&#39;mysql+pymysql://root:123@localhost:3306/todo?charset=utf8mb4&#39;</span><span class="token punctuation">,</span>
                       echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> pool_recycle<span class="token operator">=</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> Session<span class="token punctuation">(</span>engine<span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>
    ans <span class="token operator">=</span> session<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>text<span class="token punctuation">(</span><span class="token string">&#39;SELECT id, title FROM topic&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 更新删除操作需要提交 session.commit()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声明映射-元数据" tabindex="-1"><a class="header-anchor" href="#声明映射-元数据" aria-hidden="true">#</a> 声明映射（元数据）</h3><p>就是我们在 Python 中创建一个类，对应着数据库中的一张表，类的每个属性，就是这个表的字段名。这种的类对应于数据库中表的类，就称为映射类，我们要创建一个映射类来申明一张表。</p>`,3),k={href:"https://docs.sqlalchemy.org/en/20/tutorial/metadata.html",target:"_blank",rel:"noopener noreferrer"},m=s(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 方式一、直接构造</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> MetaData
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Table<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String

metadata_obj <span class="token operator">=</span> MetaData<span class="token punctuation">(</span><span class="token punctuation">)</span>
user_table <span class="token operator">=</span> Table<span class="token punctuation">(</span>
    <span class="token string">&quot;user_account&quot;</span><span class="token punctuation">,</span>
    metadata_obj<span class="token punctuation">,</span>
    Column<span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 可以指定主键、外键、默认值、是否为空等约束</span>
    Column<span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Column<span class="token punctuation">(</span><span class="token string">&quot;fullname&quot;</span><span class="token punctuation">,</span> String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment"># 方式二、声明式</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine  <span class="token comment"># 数据库引擎</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token punctuation">,</span> Integer
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> DeclarativeBase
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> mapped_column

engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">&#39;mysql+pymysql://root:123@localhost:3306/todo?charset=utf8mb4&#39;</span><span class="token punctuation">,</span>
                       echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> pool_recycle<span class="token operator">=</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">(</span>DeclarativeBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&quot;user_account&quot;</span>

    <span class="token builtin">id</span> <span class="token operator">=</span> mapped_column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> mapped_column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fullname <span class="token operator">=</span> mapped_column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;User(id=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">}</span></span><span class="token string">, name=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, fullname=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>fullname<span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span>

<span class="token comment"># 在 1.4 及以前版本中作用 Column() 而不是 mapped_column()</span>
<span class="token comment"># mapped_column() 仅适用于 ORM 声明性映射, 它不能在 Table 构造中使用！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>申明好表的话就可以通过 user_table 对象使用各种方法操作表了。</p><h3 id="插入数据-1" tabindex="-1"><a class="header-anchor" href="#插入数据-1" aria-hidden="true">#</a> 插入数据</h3>`,3),v={href:"https://docs.sqlalchemy.org/en/20/tutorial/data_insert.html",target:"_blank",rel:"noopener noreferrer"},b=s(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 方式一</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token punctuation">,</span> Integer
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> DeclarativeBase
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> mapped_column
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> insert

engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">&#39;mysql+pymysql://root:123@localhost:3306/todo?charset=utf8mb4&#39;</span><span class="token punctuation">,</span>
                       echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> pool_recycle<span class="token operator">=</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">(</span>DeclarativeBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&quot;user_account&quot;</span>

    <span class="token builtin">id</span> <span class="token operator">=</span> mapped_column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> mapped_column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fullname <span class="token operator">=</span> mapped_column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;User(id=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">, name=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">, fullname=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>fullname<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span>

<span class="token comment"># 如果事先没有创建表需要在下面语句创建一下</span>
<span class="token comment"># Base.metadata.create_all(engine)</span>

ins_SQL <span class="token operator">=</span> insert<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;M&#39;</span><span class="token punctuation">,</span> fullname<span class="token operator">=</span><span class="token string">&#39;MJX&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ins_SQL<span class="token punctuation">)</span>
<span class="token keyword">with</span> engine<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>
    result <span class="token operator">=</span> conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>ins_SQL<span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 方式二（推荐）</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token punctuation">,</span> Integer
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> DeclarativeBase
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> mapped_column
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> Session  <span class="token comment"># Session 有多种不同的创建</span>

engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">&#39;mysql+pymysql://root:123@localhost:3306/todo?charset=utf8mb4&#39;</span><span class="token punctuation">,</span>
                       echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> pool_recycle<span class="token operator">=</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">(</span>DeclarativeBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    __tablename__ <span class="token operator">=</span> <span class="token string">&quot;user_account&quot;</span>

    <span class="token builtin">id</span> <span class="token operator">=</span> mapped_column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> mapped_column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fullname <span class="token operator">=</span> mapped_column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;User(id=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">, name=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">, fullname=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>fullname<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span>

user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;M&#39;</span><span class="token punctuation">,</span> fullname<span class="token operator">=</span><span class="token string">&#39;MJX&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> Session<span class="token punctuation">(</span>engine<span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>
    ans <span class="token operator">=</span> session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>
    session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询数据" tabindex="-1"><a class="header-anchor" href="#查询数据" aria-hidden="true">#</a> 查询数据</h3>`,2),h={href:"https://docs.sqlalchemy.org/en/20/tutorial/data_select.html",target:"_blank",rel:"noopener noreferrer"},y=s(`<p>查询语句和上面的相差其实就不大了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 方式一</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> select
stmt <span class="token operator">=</span> select<span class="token punctuation">(</span>user_table<span class="token punctuation">)</span><span class="token punctuation">.</span>where<span class="token punctuation">(</span>user_table<span class="token punctuation">.</span>c<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&quot;spongebob&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span>

<span class="token keyword">with</span> engine<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>
    <span class="token keyword">for</span> row <span class="token keyword">in</span> conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>
        
<span class="token comment"># 方式二</span>
<span class="token keyword">with</span> Session<span class="token punctuation">(</span>engine<span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>
    ans <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;ed&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function g(q,_){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[n("a",r,[e("官方参考"),t(a)])]),d,n("p",null,[n("a",k,[e("官方参考"),t(a)])]),m,n("p",null,[n("a",v,[e("官方参考"),t(a)])]),b,n("p",null,[n("a",h,[e("官方参考"),t(a)])]),y])}const w=p(i,[["render",g],["__file","PythoncaozuoSQLdeliangzhongfangshi.html.vue"]]);export{w as default};
