import{_ as e,o as a,c as n,e as s}from"./app-d188f79b.js";const i={},d=s(`<h2 id="为什么要使用虚拟环境" tabindex="-1"><a class="header-anchor" href="#为什么要使用虚拟环境" aria-hidden="true">#</a> 为什么要使用虚拟环境</h2><p>Python 应用经常需要使用一些包第三方包或者模块，有时需要依赖特定的包或者库的版本，所以不能有一个能适应所有 Python 应用的软件环境，很多时候不同的 Python 应用所依赖的版本是冲突的，满足了其中一个，另一个则无法运行。解决这一问题的方法是 虚拟环境。</p><p>虚拟环境是一个包含了特定 Python 解析器以及一些软件包的自包含目录，不同的应用程序可以使用不同的虚拟环境。使用虚拟环境主要是为了 <strong>解决依赖冲突问题</strong>，而且 <strong>虚拟环境中只需要安装应用相关的包或者模块</strong>，可以给部署提供便利。</p><h2 id="实现虚拟环境的原理" tabindex="-1"><a class="header-anchor" href="#实现虚拟环境的原理" aria-hidden="true">#</a> 实现虚拟环境的原理</h2><p>虚拟环境并不是什么新技术，主要是利用了操作系统中环境变量以及进程间环境隔离的特性。</p><p>操作系统的环境变量可以为程序提供信息和做信息交换介质，进程可以共享操作系统中的环境变量，也可以为进程指定环境变量，其中 PATH 是很重要的环境变量，用于为操作系统和程序提供可执行文件的访问路径，例如写一个程序 <code>a.exe</code>，存放在 <code>D:\\MyProgram</code> 中，在命令行中执行 <code>a.exe </code>，会得到提示 <code>“无法找到程序 a.exe” </code>，为了让系统找到，可以将 <code>D:\\MyProgram</code> 路径加入到 PATH 环境变量中，当输入 <code>a.exe</code> 时，操作系统就会从 PATH 所提供的路径中逐个查找，这时就可以找到了。</p><p>Python 虚拟环境就是利用这个特性构建的，在激活虚拟环境之时，激活脚本会 <strong>将当前命令行程序的 PATH 修改为虚拟环境的</strong> 这样执行命令就会在被修改的 PATH 中查找，从而避免了原本 PATH 可以找到的命令，从而实现了 Python 环境的隔离。</p><p>为了让开发容易区分当前环境是否虚拟环境以及是那个虚拟环境，命令提示符前会加上特殊标记。</p><h2 id="怎么创建虚拟环境" tabindex="-1"><a class="header-anchor" href="#怎么创建虚拟环境" aria-hidden="true">#</a> 怎么创建虚拟环境</h2><h3 id="virtualenv-工具" tabindex="-1"><a class="header-anchor" href="#virtualenv-工具" aria-hidden="true">#</a> virtualenv 工具</h3><p>在 python3.3 之前，只能通过 virtualenv 创建虚拟环境，首先需要安装 virtualenv</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> virtualenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完后，在当前目录下创建一个名为 myvenv 的虚拟环境（也可以切换目录再创建）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>virtualenv --no-site-packages myvenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数 <code>--no-site-packages</code> 的意思是创建虚拟环境时，不复制主环境中安装的第三方包，也就是创建一个 “干净的” 虚拟环境</p><p>virtualenv 还有很多参数，用于不同的使用场景。例如:</p><ul><li><code>-p</code>：用于指定 Python 解析器，默认为当前环境中的 Python</li><li><code>--no-pip</code>：不需要安装 pip，默认为安装</li><li><code>--clear</code>：如果创建虚拟环境的目录已经有了其他虚拟环境，清除重建</li></ul><h3 id="venv-模块" tabindex="-1"><a class="header-anchor" href="#venv-模块" aria-hidden="true">#</a> <strong>venv 模块</strong></h3><p>Python3.3 之后，可以用模块 venv 代替 virtualenv 工具，好处是不用单独安装。3.3 及之后的版本，都可以通过安装好的 Python 来创建虚拟环境:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> venv myvenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在当前目录创建一个名为 myvenv 的虚拟环境</p><p>venv 也有参数，不过相比 virtualenv 少了些，这里简单介绍几个：</p><ul><li><code>--without-pip</code>：不需要安装 pip，默认为安装</li><li><code>--clear</code>：如果创建虚拟环境的目录已经有了其他虚拟环境，清除重建</li></ul><p>因为 venv 是依附于一个 Python 解析器创建的，所以不需要指定 Python 解释器版本。</p><h2 id="怎么使用虚拟环境" tabindex="-1"><a class="header-anchor" href="#怎么使用虚拟环境" aria-hidden="true">#</a> 怎么使用虚拟环境</h2><p>虚拟环境创建好后，需要激活才能在当前命令行中使用，<strong>可以理解成将当前命令行环境中 PATH 变量的值替换掉</strong>。</p><p>通过 virtualenv 和 模块 venv 创建的虚拟环境，激活方式是一样的，都运行激活脚本</p><ul><li>Windows 系统中，激活脚本路径是 <code>&lt;myvenv&gt;\\Scripts\\activate.bat</code>，如果是 powershell 命令行，脚本换成 <code>Activate.ps1</code> , 注意将 <code>&lt;myvenv&gt;</code>换成你自己的虚拟环境目录</li><li>Linux 系统中，激活脚本路径是 <code>&lt;myvenv&gt;/bin/activate</code>，默认脚本没有执行权限，要么设置脚本为可执行，要么用 <code>source</code> 命令执行，例如</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> <span class="token operator">&lt;</span>myvenv<span class="token operator">&gt;</span>/bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>激活后，就可以在命令行中看到虚拟环境标记。</p><p><img src="https://s2.loli.net/2024/03/16/pzgfhMx4VW5jeAL.png" alt="enev.png"></p><p>可以打印 PATH，命令如下：</p><p>Linux 下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Windows 下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> %<span class="token environment constant">PATH</span>%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Windows PowerShell 下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$env</span>:path
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到创建的虚拟环境脚本目录被加载了最前面。</p><p><strong>注意：在虚拟环境中安装包不要加 sudo，加了的话会将包下载到全局中。</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo pip install flask  # 千万不要这样做！直接 pip 就行！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="退出虚拟环境" tabindex="-1"><a class="header-anchor" href="#退出虚拟环境" aria-hidden="true">#</a> 退出虚拟环境</h2><p>退出虚拟环境很简单，只需要执行 <code>deactivate</code> 命令就行，这个命令也在虚拟环境的脚本目录下，因为激活时，将脚本目录设置到 PATH 中了，所以可以直接使用。退出虚拟环境相当于将 PATH 恢复成原来的。</p><h2 id="删除虚拟环境" tabindex="-1"><a class="header-anchor" href="#删除虚拟环境" aria-hidden="true">#</a> 删除虚拟环境</h2><p>首先需要退出虚拟环境，然后将虚拟环境所在的文件夹删除就行。</p><p>Lunux 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> myvenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,47),l=[d];function t(r,c){return a(),n("div",null,l)}const p=e(i,[["render",t],["__file","Pythonxunihuanjing.html.vue"]]);export{p as default};
