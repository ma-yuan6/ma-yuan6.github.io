import{_ as t,o as e,c as l,e as d}from"./app-9e62998e.js";const a={},r=d(`<p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。Python 使用 re 模块实现正则表达式的功能。</p><h2 id="re-match" tabindex="-1"><a class="header-anchor" href="#re-match" aria-hidden="true">#</a> re.match()</h2><p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match() 就返回 none。</p><p><strong>语法：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>re.match(pattern, string, flags=0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数：</strong></p><ul><li>pattern：匹配的正则表达式。</li><li>string：要匹配的字符串。</li><li>flags：标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</li></ul><p>匹配成功 re.match 方法返回一个匹配的对象，否则返回 None。</p><p>可以使用 group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p><table><thead><tr><th style="text-align:left;">匹配对象方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">group(num=0)</td><td style="text-align:left;">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td></tr><tr><td style="text-align:left;">groups()</td><td style="text-align:left;">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td></tr></tbody></table><h2 id="re-search" tabindex="-1"><a class="header-anchor" href="#re-search" aria-hidden="true">#</a> re.search()</h2><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p><p><strong>语法：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>re.search(pattern, string, flags=0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>区别：</strong></p><p><strong>re.match 只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回 None；而 re.search 匹配整个字符串，直到找到一个匹配。</strong></p><h2 id="re-sub" tabindex="-1"><a class="header-anchor" href="#re-sub" aria-hidden="true">#</a> re.sub()</h2><p>Python 的 re 模块提供了re.sub 用于替换字符串中的匹配项。</p><p><strong>语法：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>re.sub(pattern, repl, string, count=0, flags=0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数：</strong></p><ul><li>pattern : 正则中的模式字符串。</li><li>repl : 替换的字符串，也可为一个函数。</li><li>string : 要被查找替换的原始字符串。</li><li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li></ul><h2 id="re-compile" tabindex="-1"><a class="header-anchor" href="#re-compile" aria-hidden="true">#</a> re.compile()</h2><p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p><p><strong>语法：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>re.compile(pattern[, flags])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数：</strong></p><ul><li><p>pattern：一个字符串形式的正则表达式</p></li><li><p>flags：可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：</p><ol><li>re.I： 忽略大小写。</li><li>re.L：表示特殊字符集 \\w, \\W, \\b, \\B, \\s, \\S 依赖于当前环境。</li><li>re.M：多行模式。</li><li>re.S：即为 ”<strong>.</strong> “并且包括换行符在内的任意字符（”<strong>.</strong>“ 不包括换行符）。</li><li>re.U：表示特殊字符集 \\w, \\W, \\b, \\B, \\d, \\D, \\s, \\S 依赖于 Unicode 字符属性数据库。</li><li>re.X：为了增加可读性，忽略空格和 <strong>#</strong> 后面的注释。</li></ol></li></ul><h2 id="re-findall" tabindex="-1"><a class="header-anchor" href="#re-findall" aria-hidden="true">#</a> re.findall()</h2><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果有多个匹配模式，则返回元组列表，如果没有找到匹配的，则返回空列表。</p><p><strong>match 和 search 是匹配一次 findall 匹配所有。</strong></p><p><strong>语法：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>findall(string[, pos[, endpos]])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数：</strong></p><ul><li>string：待匹配的字符串。</li><li>pos：可选参数，指定字符串的起始位置，默认为 0。</li><li>endpos：可选参数，指定字符串的结束位置，默认为字符串的长度。</li></ul><h2 id="re-finditer" tabindex="-1"><a class="header-anchor" href="#re-finditer" aria-hidden="true">#</a> re.finditer()</h2><p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>re.finditer(pattern, string, flags=0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数：</strong></p><ul><li>pattern：匹配的正则表达式。</li><li>string：要匹配的字符串。</li><li>flags：标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</li></ul><h2 id="re-split" tabindex="-1"><a class="header-anchor" href="#re-split" aria-hidden="true">#</a> re.split（）</h2><p>split 方法按照能够匹配的子串将字符串分割后返回列表。</p><p><strong>语法：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>re.split(pattern, string[, maxsplit=0, flags=0])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数：</strong></p><ul><li>pattern：匹配的正则表达式。</li><li>string：要匹配的字符串。</li><li>maxsplit：分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。</li><li>flags：标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</li></ul><h2 id="正则表达式参考" tabindex="-1"><a class="header-anchor" href="#正则表达式参考" aria-hidden="true">#</a> 正则表达式参考</h2><p>模式字符串使用特殊的语法来表示一个正则表达式：</p><ul><li>字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。</li><li>多数字母和数字前加一个反斜杠时会拥有不同的含义。</li><li>标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。</li><li>反斜杠本身需要使用反斜杠转义。</li></ul><p>下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。</p><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">^</td><td style="text-align:left;">匹配字符串的开头。</td></tr><tr><td style="text-align:left;">$</td><td style="text-align:left;">匹配字符串的末尾。</td></tr><tr><td style="text-align:left;">.</td><td style="text-align:left;">匹配任意字符，除了换行符，当 re.DOTALL 标记被指定时，则可以匹配包括换行符的任意字符。</td></tr><tr><td style="text-align:left;">[...]</td><td style="text-align:left;">用来表示一组字符，单独列出：[amk] 匹配 &#39;a&#39;，&#39;m&#39;或&#39;k&#39;</td></tr><tr><td style="text-align:left;">[^...]</td><td style="text-align:left;">不在 [] 中的字符：[^abc] 匹配除了 a，b，c 之外的字符。</td></tr><tr><td style="text-align:left;">re*</td><td style="text-align:left;">匹配 0 个或多个的表达式。</td></tr><tr><td style="text-align:left;">re+</td><td style="text-align:left;">匹配 1 个或多个的表达式。</td></tr><tr><td style="text-align:left;">re?</td><td style="text-align:left;">匹配 0 个或 1 个由前面的正则表达式定义的片段，非贪婪方式。</td></tr><tr><td style="text-align:left;">re{n}</td><td style="text-align:left;">精确匹配 n 个前面表达式。例如，<strong>o{2}</strong> 不能匹配 &quot;Bob&quot; 中的 &quot;o&quot;，但是能匹配 &quot;food&quot; 中的两个 o。</td></tr><tr><td style="text-align:left;">re{n,}</td><td style="text-align:left;">匹配 n 个前面表达式。例如， o{2,} 不能匹配&quot;Bob&quot;中的&quot;o&quot;，但能匹配 &quot;foooood&quot;中的所有 o。&quot;o{1,}&quot; 等价于 &quot;o+&quot;。&quot;o{0,}&quot; 则等价于 &quot;o*&quot;。</td></tr><tr><td style="text-align:left;">re{n, m}</td><td style="text-align:left;">匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式。</td></tr><tr><td style="text-align:left;">a | b</td><td style="text-align:left;">匹配 a 或 b。</td></tr><tr><td style="text-align:left;">(re)</td><td style="text-align:left;">对正则表达式分组并记住匹配的文本。</td></tr><tr><td style="text-align:left;">(?imx)</td><td style="text-align:left;">正则表达式包含三种可选标志：i，m 或 x 。只影响括号中的区域。</td></tr><tr><td style="text-align:left;">(?-imx)</td><td style="text-align:left;">正则表达式关闭 i，m，或 x 可选标志。只影响括号中的区域。</td></tr><tr><td style="text-align:left;">(?: re)</td><td style="text-align:left;">类似 (...), 但是不表示一个组。</td></tr><tr><td style="text-align:left;">(?imx:re)</td><td style="text-align:left;">在括号中使用i, m, 或 x 可选标志。</td></tr><tr><td style="text-align:left;">(?-imx: re )</td><td style="text-align:left;">在括号中不使用i, m, 或 x 可选标志。</td></tr><tr><td style="text-align:left;">(?#...)</td><td style="text-align:left;">注释</td></tr><tr><td style="text-align:left;">(? = re)</td><td style="text-align:left;">前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</td></tr><tr><td style="text-align:left;">(?! re)</td><td style="text-align:left;">前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功</td></tr><tr><td style="text-align:left;">(? &gt; re)</td><td style="text-align:left;">匹配的独立模式，省去回溯。</td></tr><tr><td style="text-align:left;">\\w</td><td style="text-align:left;">匹配字母数字及下划线。</td></tr><tr><td style="text-align:left;">\\W</td><td style="text-align:left;">匹配非字母数字及下划线。</td></tr><tr><td style="text-align:left;">\\s</td><td style="text-align:left;">匹配任意空白字符，等价于 <strong>[ \\t\\n\\r\\f]</strong>。</td></tr><tr><td style="text-align:left;">\\S</td><td style="text-align:left;">匹配任意非空字符。</td></tr><tr><td style="text-align:left;">\\d</td><td style="text-align:left;">匹配任意数字，等价于 [0-9].</td></tr><tr><td style="text-align:left;">\\D</td><td style="text-align:left;">匹配任意非数字。</td></tr><tr><td style="text-align:left;">\\A</td><td style="text-align:left;">匹配字符串开始。</td></tr><tr><td style="text-align:left;">\\Z</td><td style="text-align:left;">匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。</td></tr><tr><td style="text-align:left;">\\z</td><td style="text-align:left;">匹配字符串结束。</td></tr><tr><td style="text-align:left;">\\G</td><td style="text-align:left;">匹配最后匹配完成的位置。</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">匹配一个单词边界，也就是指单词和空格间的位置。例如， &#39;er\\b&#39; 可以匹配&quot;never&quot; 中的 &#39;er&#39;，但不能匹配 &quot;verb&quot; 中的 &#39;er&#39;。</td></tr><tr><td style="text-align:left;">\\B</td><td style="text-align:left;">匹配非单词边界。&#39;er\\B&#39; 能匹配 &quot;verb&quot; 中的 &#39;er&#39;，但不能匹配 &quot;never&quot; 中的 &#39;er&#39;。</td></tr><tr><td style="text-align:left;">\\n, \\t, 等</td><td style="text-align:left;">匹配一个换行符，匹配一个制表符，等。</td></tr><tr><td style="text-align:left;">\\1...\\9</td><td style="text-align:left;">匹配第n个分组的内容。</td></tr><tr><td style="text-align:left;">\\10</td><td style="text-align:left;">匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。</td></tr></tbody></table><h3 id="字符匹配" tabindex="-1"><a class="header-anchor" href="#字符匹配" aria-hidden="true">#</a> 字符匹配</h3><table><thead><tr><th style="text-align:left;">实例</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">python</td><td style="text-align:left;">匹配 &quot;python&quot;.</td></tr></tbody></table><h3 id="字符类" tabindex="-1"><a class="header-anchor" href="#字符类" aria-hidden="true">#</a> 字符类</h3><table><thead><tr><th style="text-align:left;">实例</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">[Pp]ython</td><td style="text-align:left;">匹配 &quot;Python&quot; 或 &quot;python&quot;</td></tr><tr><td style="text-align:left;">rub[ye]</td><td style="text-align:left;">匹配 &quot;ruby&quot; 或 &quot;rube&quot;</td></tr><tr><td style="text-align:left;">[aeiou]</td><td style="text-align:left;">匹配中括号内的任意一个字母</td></tr><tr><td style="text-align:left;">[0-9]</td><td style="text-align:left;">匹配任何数字。类似于 [0123456789]</td></tr><tr><td style="text-align:left;">[a-z]</td><td style="text-align:left;">匹配任何小写字母</td></tr><tr><td style="text-align:left;">[A-Z]</td><td style="text-align:left;">匹配任何大写字母</td></tr><tr><td style="text-align:left;">[a-zA-Z0-9]</td><td style="text-align:left;">匹配任何字母及数字</td></tr><tr><td style="text-align:left;">[^aeiou]</td><td style="text-align:left;">除了aeiou字母以外的所有字符</td></tr><tr><td style="text-align:left;">[^0-9]</td><td style="text-align:left;">匹配除了数字外的字符</td></tr></tbody></table><h3 id="特殊字符类" tabindex="-1"><a class="header-anchor" href="#特殊字符类" aria-hidden="true">#</a> 特殊字符类</h3><table><thead><tr><th style="text-align:left;">实例</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">.</td><td style="text-align:left;">匹配除 &quot;\\n&quot; 之外的任何单个字符。要匹配包括 &#39;\\n&#39; 在内的任何字符，请使用象 &#39;[.\\n]&#39; 的模式。</td></tr><tr><td style="text-align:left;">\\d</td><td style="text-align:left;">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td style="text-align:left;">\\D</td><td style="text-align:left;">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td style="text-align:left;">\\s</td><td style="text-align:left;">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</td></tr><tr><td style="text-align:left;">\\S</td><td style="text-align:left;">匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</td></tr><tr><td style="text-align:left;">\\w</td><td style="text-align:left;">匹配包括下划线的任何单词字符。等价于&#39;[A-Za-z0-9_]&#39;。</td></tr><tr><td style="text-align:left;">\\W</td><td style="text-align:left;">匹配任何非单词字符。等价于 &#39;[^A-Za-z0-9_]&#39;。</td></tr></tbody></table>`,57),i=[r];function n(s,g){return e(),l("div",null,i)}const x=t(a,[["render",n],["__file","zhengzebiaodashi.html.vue"]]);export{x as default};
