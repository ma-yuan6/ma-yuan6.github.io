import{_ as n,o as s,c as a,e as p}from"./app-9e62998e.js";const t={},e=p(`<h2 id="变量赋值的原理" tabindex="-1"><a class="header-anchor" href="#变量赋值的原理" aria-hidden="true">#</a> 变量赋值的原理</h2><p>首先我们先来讲一下变量赋值的底层原理，假设运行 <code>age = 18</code> ，计算机会进行以下 3 步操作：</p><p>① 在内存 <em>栈区</em> 中创建 age 这个变量名的名称空间。</p><p>② 在内存 <em>堆区</em> 中创建 18 这个值。</p><p>③ 等于号（=）表示赋值的意思，会把堆区中数据 18 的内存地址指向给栈区中变量名 age 。</p><p><strong>所以，在计算机中<code>age = 18</code>的表示，并不是 age 等于 18 ，而是 age 等于 18 这个值的内存地址。</strong></p><h2 id="列表在内存中的存储方式" tabindex="-1"><a class="header-anchor" href="#列表在内存中的存储方式" aria-hidden="true">#</a> 列表在内存中的存储方式</h2><p>假如运行以下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;ma&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;ma&#39;</span><span class="token punctuation">]</span> <span class="token number">2288075880960</span>

x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">19</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&#39;ma&#39;</span><span class="token punctuation">]</span> <span class="token number">2288075880960</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>id( ) 函数可以取得变量所指向的 <em>内存地址</em></p><p><strong>&gt;&gt;</strong> 符号表示输出</p></div><p>从上述代码可以看出列表的值虽然变了，但列表的地址却没有变。声明一个列表 <code>x = [18, &#39;ma&#39;]</code>，计算机底层会发生以下几件事：</p><ol><li>在内存 <em>栈区</em> 中开辟一个名称空间，存放 x 。</li><li>在内存的 <em>堆区</em> 中开辟一个内存空间，把列表放进去。同时，列表里面再存储 18 和 &#39;ma&#39; 的内存地址。</li><li>将列表的内存地址赋值给 x 。</li></ol><p>如图所示：</p><p><img src="https://s2.loli.net/2024/03/16/hZ8JXnR7AeNtSpk.png" alt="列表在内存中的存储方式.png"></p><p><strong>因此，我们说的列表可变是指列表中的元素是可变的，修改列表中的元素不会影响到列表本身在内存中的存储地址。</strong></p><p>我们可以用一个比喻说明：</p><p>列表是一个瓶子，我们不管往瓶子里面放的是酒、还是水都不影响瓶子本身。 x 这个名字指向了列表，就相当于我们手里拿着瓶子，不管瓶子里面装水或是酒，都不会改变我们拿着的这个瓶子。</p><p><strong>字典的存储方式也是如此，只不过列表里面存储的是索引对应值的内存地址，字典存储的就是 key 对应的值的内存地址。</strong></p>`,18),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","liebiaozainacunzhongdecunchufangshi.html.vue"]]);export{r as default};
